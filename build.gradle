apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'signing'
apply plugin: 'maven'

group = 'com.keysolutions'
version = '0.5.7.6'
// compile for JDK 1.5
sourceCompatibility = 1.5
targetCompatibility = 1.5



// get rid of bootclasspath warning by setting it

// BB-MOD - this is the original version
// def env = System.getenv()
//def bootClasspathStr = env['JAVA_HOME'] + "/jre/lib/rt.jar"
//println env['JAVA_HOME']+'/jre/lib/rt.jar'


// BB-MOD bb version setting the path by hand
// WARNING: SOLUTION valid only for those that use ANDROID STUDIO on MAC
//          Eclipse or other operating systems should work fine with Kenyees original version
// problem-1: Android studio doesn't pass environment variables to gradle, so "env" will be null > instead you need to set it by hand
//      source: as stated here http://stackoverflow.com/questions/21173826/environment-variable-in-settings-gradle-not-working-with-android-studio
// problem-2: on Mac the rt.jar has been split into classes.jar and ui.jar so you need to point to the appropriate one (classes.jar). There is an alt-rt.jar but doesn't work
//      source:  https://discussions.apple.com/thread/811897?start=0&tstart=0
def bootClasspathStr = "/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/classes.jar" //BB-MOD this is in my system only - you should change it
println "************************* bootClasspathStr: " + bootClasspathStr

project.tasks.withType(AbstractCompile, { AbstractCompile ac ->
    ac.options.bootClasspath = bootClasspathStr // options is always there but not defined on AbstractCompile so going to hit it anyway
})

//* BB-MOD commented out
jar {
    manifest {
        attributes 'Implementation-Title': 'Java DDP Client Library', 'Implementation-Version': version
    }
}
//*/

//* BB-MOD
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from 'build/docs/javadoc'
}
//*/

task sourcesJar(type: Jar) {
    from sourceSets.main.allSource
    classifier = 'sources'
}


repositories {
    mavenCentral()
}

dependencies {
    compile "commons-collections:commons-collections:[3.2,4.0)"
    testCompile "junit:junit:[4,5)"
    compile "org.java-websocket:Java-WebSocket:1.3.0"
    compile "com.google.code.gson:gson:2.2.4"
    compile "org.slf4j:slf4j-api:[1.7,1.8)"
    compile "org.slf4j:slf4j-simple:[1.7,1.8)"
    compile "com.nimbusds:srp6a:[1.4,1.5)"
}

test {
    systemProperties 'property': 'value'
}

uploadArchives {
    repositories.mavenDeployer {
        beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
 
        repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
            // originali
            // authentication(userName: sonatypeUsername, password: sonatypePassword)
            // the solution implies that in android-ddp-client/project.properties you put 2 variables sonatypeUsername= and sonatypePassword= ... even with no values
            authentication(userName: project.properties['sonatypeUsername'], password: project.properties['sonatypePassword'])
        }
        
        pom.project {
            name 'JavaDDPClient'
            packaging 'jar'
            description 'JavaDDPClient is a Java library for the Meteor.js framework DDP websocket protocol'
            url 'https://github.com/kenyee/java-ddp-client'
 
            scm {
                url 'scm:git@github.com:kenyee/java-ddp-client.git'
                connection 'scm:git@github.com:kenyee/java-ddp-client.git'
                developerConnection 'scm:git@github.com:kenyee/java-ddp-client.git'
            }
 
            licenses {
                license {
                   name 'The Apache Software License, Version 2.0'
                   url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                   distribution 'repo'
                }
            }
 
            developers {
                developer {
                    id 'kenyee'
                    name 'Ken Yee'
                }
            }
        }
    }
}

artifacts {
    archives jar
    archives javadocJar
    archives sourcesJar
}
signing {
    sign configurations.archives
}

// use this for testing pom.xml generation
task writeNewPom << {
    pom {
        project {
            inceptionYear '2013'
            licenses {
                license {
                    name 'The Apache Software License, Version 2.0'
                    url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    distribution 'repo'
                }
            }
        }
        /* converts Gradle dynamic dependency syntax 
        whenConfigured { generatedPom ->
          generatedPom.dependencies.each { mavenDep ->
            if (isDynamic(mavenDep)) {
              mavenDep.version = '[' + mavenDep.version[0..-2] + ',)'
            }
          }
        }
        */

    }.writeTo("$buildDir/newpom.xml")
}

/**
  * Locks a Maven dependency into a specific version.
  * @param dep the dependency
*/
void lockDependency(def dep) {
  if (isDynamic(dep)) {
    project.logger.info("Lockin $dep into a specific revision")
    Configuration conf = project.configurations.findByName(dep.scope)
    if (conf == null) {
      throw new Exception("Unable to lock $dep due to missing configuration, aborting as dependency tree will be unstable")
    } else {
      def matches = conf.resolvedConfiguration.resolvedArtifacts.findAll {
        it.moduleVersion.id.group.equals(dep.groupId) && it.moduleVersion.id.name.equals(dep.artifactId) && (it.classifier == null || (it.classifier != null && it.classifier.equals(dep.classifier)))
      }
      if (matches.size() > 1)
        throw new Exception("Unable to lock $dep due to multiple resolved dependencies, aborting as dependency tree will be unstable")
      else
        matches.each { dep.version = it.moduleVersion.id.version }
      }
    }
  }
/*
 * Checks for whether a dependency is dynamic
*/
boolean isDynamic(def dep) {
  return dep.version.any { it == '[' || it == ']' || it == '(' || it == ')' || it == '+' }
}
